*completor.txt*    For Vim version 8.0.    Last change: 2016 Oct 12


Async completion framework made ease.                   *completor*

1. Intro                        |completor-intro|
2. Install                      |completor-install|
3. Completers                   |completor-completers|
4. Options                      |completor-options|
5. Write a new completer        |completor-writing|

==============================================================================
1. Intro                                                *completor-intro*

Completor is an asynchronous code completion framework for vim8. New features
of vim8 are used to implement the fast completion engine with low overhead.
For using semantic completion, external completion tools should be installed.

Completor uses python to implement the completers, so vim should be compiled
with `python` or `python3`.

==============================================================================
2. Install                                              *completor-install*

Using vim8 builtin package manager:
>
    mkdir -p ~/.vim/pack/completor/start
    cd ~/.vim/pack/completor/start
    git clone https://github.com/maralla/completor.vim.git
<

Using vim-plug:
>
    Plug 'maralla/completor.vim'
<
==============================================================================
3. Completers                                           *completor-completers*


filename                                                *completor-filename*
        When the input matches a file path pattern the file name will be
        automatically completed.

buffer                                                  *completor-buffer*
        This is the fallback completer. When no semantic completer found the
        buffer completer will be used and will complete based on the current
        buffers.

Python                                                  *completor-python*
        Use jedi for completion. jedi should be installed for semantic
        completion.

        Install jedi to global environment or in virtualenv:
>
            pip install jedi
<
        The python executable can be specifid using:
>
            let g:completor_python_binary = '/path/to/python/with/jedi/installed'
<
Rust                                                    *completor-rust*
        Use racer for completion.

        Install racer according to this:
        https://github.com/phildawes/racer#installation

        To specify the racer executable path:
>
           let g:completor_racer_binary = '/path/to/racer'
<
Javascript                                              *completor-javascript*
        Use tern for completion.

        To install tern you must have node and npm installed. Then run:
>
            make js
<
        The node executable path can be specifid using:
>
            let g:completor_node_binary = '/path/to/node'
<
c/c++                                                   *completor-cpp*
        Use clang for completion. Clang should be installed first.

        To specify clang path:
>
            let g:completor_clang_binary = '/path/to/clang'
<
        To pass extra clang arguments, you can create a file named
        .clang_completer under the project root directory or any parent
        directories. Every argument should be in a single line in the file.
        This is an example file:
>
            -std=c++11
            -I/Users/maralla/Workspace/src/dji-sdk/Onboard-SDK/lib/inc
            -I/Users/maralla/Workspace/src/dji-sdk/Onboard-SDK/sample/Linux/inc
<
==============================================================================
4. Options                                              *completor-options*

==============================================================================
5. Write a new completer                                *completor-writing*


vim:tw=78:ts=8:ft=help:norl:
